// TODO
// 1. ÎùºÏö∞ÌÑ∞ Ï†ïÏùò
// 2. firebase Ï±ÑÌåÖ ÎÇ¥Ïó≠ Í∞ÄÏ†∏Ïò§Í∏∞

// express Ïã§Ìñâ
const express = require("express");

// firebase Ïã§Ìñâ Ïãú ÌïÑÏöîÌïú Ìå®ÌÇ§ÏßÄ & ÏÑ§Ï†ïÎì§
const admin = require('firebase-admin');
const mongoose = require('mongoose');
const axios = require('axios');

var serviceAccount = require("/home/dummy/keb/Main/login-57511-firebase-adminsdk-fbsvc-be1ccd55a1.json");

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });

const db = admin.firestore();
const chatRef = db.collection("chats");
const userRef = db.collection("users");

// ÏÇ¨Ïö©Ìï† ÎùºÏö∞ÌÑ∞ÌÑ∞ ÎÇ¥Ïó≠
const { dbconnection } = require("./config/db");
const loginRoutes = require("./routes/login");
const appRoutes = require('./routes/app');
const chatRoutes = require('./routes/chat');
const aiRoutes = require("./routes/ai");
const rdRoutes = require('./routes/rd');

const app = express();
const PORT = 8000;

app.use(express.json());
app.use("/login", loginRoutes);
app.use('/app', appRoutes);
app.use("/chat", chatRoutes);
app.use("/ai", aiRoutes);
app.use("/realtime_detection", rdRoutes);

async function Server() {
    try {
        console.log("üîÑ MongoDB Ïó∞Í≤∞ Ï§ë...");
        await connectDB();
        console.log("‚úÖ MongoDB Ïó∞Í≤∞ ÏÑ±Í≥µ!");

        app.listen(PORT, () => {
            console.log(`üöÄ ÏÑúÎ≤ÑÍ∞Ä http://localhost:${PORT} ÏóêÏÑú Ïã§Ìñâ Ï§ë`);
        });

        // firebase Ïã§Ìñâ
        firebase();
    } catch (error) {
        console.error("‚ùå ÏÑúÎ≤Ñ ÏãúÏûë Ïã§Ìå®:", error.message);
    }
}

module.exports = {Server};

let chatuserDB;
let chatuser_schema = mongoose.Schema({
    phone : {type : String, require : true},
    name : {type : String, require : true},
    time : { type: Date, default: Date.now }
}, {collection : "chatuser_info" });
const ChatUser = mongoose.model("ChatUser", chatuser_schema);

async function firebase_getuser(){
    userRef.onSnapshot(async (snapshot) => {
        snapshot.docChanges().forEach(async (change) =>{
            if(change.type === 'added'){
                let userinfo = change.doc.data();
                if (!chatuserDB) { // MongoDB Ïó∞Í≤∞Ïù¥ ÏóÜÏùÑ ÎïåÎßå Ïó∞Í≤∞
                    const dbConnection = await dbconnection();
                    chatuserDB = dbConnections.chat_userDB;

                    let new_chatuser = new ChatUser({
                        phone : userinfo.phone,
                        name : userinfo.name,
                    })

                    let user = chatuserDB.findOne({phone : userinfo.phone})
                    if(!user){
                        await new_chatuser.save()
                                .then(console.log("User created"))
                                .catch(err => console.log("User save Error: ", err));
                    }
                    else{
                        console.log("User is already exist!");
                    }
                    return {phone : userinfo.phone, name : userinfo.name};
                }
            }
        })
    })
}

let userLoginDB;

async function firebase_getchatting() {

    // firebaseÏùò userÏóêÏÑú Ï∞æÏùÄ Ï†ÑÌôîÎ≤àÌò∏/Ïù¥Î¶Ñ Î∞õÏïÑÏò¥
    let {chatuser_phone, nickname} = await firebase_getuser();

    let lastCheckedTime = new Date(); // Ï¥àÍ∏∞Ìôî ÏãúÏ†ê
    chatRef.onSnapshot(async (snapshot) => {
        snapshot.docChanges().forEach(async (change) => {
            if(!userLoginDB){
                const dbConnection = await dbconnection();
                userLoginDB = dbConnection.userLoginDB;
            }
            
            // Ï†ÑÌôîÎ≤àÌò∏Î•º ÌÜµÌï¥ userLoginDBÏóêÏÑú ÏÇ¨Ïö©Ïûê("ÏûêÎÖÄ") Ï∞æÍ∏∞
            const existingUser = await userLoginDB.findOne({ phone: chatuser_phone });

            if (existingUser) {
                if (change.type === "added") {
                    let userData = change.doc.data();
                    // userData.timestampÍ∞Ä Ï∞∏Ïù¥Î©¥ (ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏúºÎ©¥) -> ÌòÑÏû¨ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
                    const chatTimestamp = userData.timestamp ? userData.timestamp.toDate() : null;

                    // ÌòÑÏû¨ ÏãúÍ∞Ñ Ïù¥ÌõÑÏùò Ï±ÑÌåÖÎßå Í∞ÄÏ†∏Ïò§Í∏∞
                    if (chatTimestamp && chatTimestamp > lastCheckedTime) {
                        console.log(`‚úÖ ÏÉàÎ°úÏö¥ Ï±ÑÌåÖ Î∞úÍ≤¨ (${userData}), Ï±ÑÌåÖ Ï†ÄÏû• Ï§ÄÎπÑ: ${chatuser_phone}`);
                        chatScrap(userData, chatuser_phone);
                    }
                }
            }
        });
        // Ïä§ÎÉÖÏÉ∑ Ï≤òÎ¶¨ ÌõÑ ÎßàÏßÄÎßâ ÌôïÏù∏ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
        lastCheckedTime = new Date();
    });
}

async function chatScrap(user_chat, user_phoneNumber) {
    if(user_chat.imageUrl) await sendImage(user_chat, user_phoneNumber);
    else if (user_chat.audioUrl) await sendAudio(user_chat, user_phoneNumber);
    else await sendText(user_cha, user_phoneNumber);
}

async function sendText(user_chat, user_phoneNumber) {
    let data = user_chat;
    let phone_number = user_phoneNumber;

    let text_api = {
        phone : phone_number,
        text : {
            Sender : data.nickname,
            time : data.time,
            message : 'Î©îÎ°±'
        }
    }
    let res = await axios.post("http://localhost:8001/chat/text_process", text_api);
    return res.body;
}

async function sendImage (user_chat, user_phoneNumber) {
    let data = user_chat;
    let phone_number = user_phoneNumber;

    let filePath = path.join(__dirname, 'image', `${data.time}.jpg`);
    download(data.imageUrl, filePath)
    
    // ‚úÖ JSON Îç∞Ïù¥ÌÑ∞Î•º Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôòÌïòÏó¨ Ï∂îÍ∞Ä
    let imageData = {
        phone : phone_number,
        filename: data.time,
        path: filePath,
        time: data.time
    };

    try {
        let res = await axios.post("http://localhost:8000/chat/image_process", imageData);
        console.log("Server Response:", res.data);
        return res.data;
    } catch (error) {
        console.error("Error uploading image:", error.response?.data || error.message);
    }
}

async function sendaudio(user_chat, user_phoneNumber) {
    let data = user_chat;
    let phone_number = user_phoneNumber;

    //let filePath = path.join(__dirname, 'audio', `${data.time}.jpg`);
    let filePath = path.join(__dirname, 'audio', `${data.time}.mp3`);

    download(data.audioUrl, filePath)
    
    // ‚úÖ JSON Îç∞Ïù¥ÌÑ∞Î•º Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôòÌïòÏó¨ Ï∂îÍ∞Ä
    let audioData = {
        phone : phone_number,
        filename: data.time,
        path: filePath,
        time: data.time
    };

    try {
        let res = await axios.post("http://localhost:8000/audio/audio_process", audioData);
        return res.data;
    } catch (error) {
        console.error("Error uploading image:", error.response?.data || error.message);
    }
}

// ÌååÏùº Îã§Ïö¥Î°úÎìú Ìï®Ïàò ÏàòÏ†ï
async function download(url, filePath) {
    try {
        console.log(`Downloading file from: ${url} to ${filePath}`);

        // ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
        let dir = path.dirname(filePath);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }

        let response = await axios({
            method: 'get',
            url: url,
            responseType: 'stream'
        });

        let writer = fs.createWriteStream(filePath);

        response.data.pipe(writer);
        writer.on('finish', () => {
            console.log(`‚úÖ File successfully downloaded: ${filePath}`);
            console.log('Download Success');
        });
        writer.on('error', (error) => {
            console.error(`‚ùå Error writing file: ${error}`);
            console.log(`Download Error: ${error.message}`);
        });

    } catch (error) {
        console.error(`‚ùå Error downloading file: ${error.message}`);
        console.log(`Download Error: ${error.message}`);
    }
}