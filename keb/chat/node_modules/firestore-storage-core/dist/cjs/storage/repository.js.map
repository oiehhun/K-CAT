{"version":3,"file":"repository.js","sourceRoot":"","sources":["../../../src/storage/repository.ts"],"names":[],"mappings":";;;AAAA,4BAA0B;AAC1B,+CAAmF;AAInF,MAAM,kBAAkB,GAAG,uBAAuB,CAAC;AACnD,MAAM,WAAW,GAAG,gBAAgB,CAAC;AAErC;;;GAGG;AACH,MAAsB,cAAc;IAInC;QACC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,0BAA0B,IAAI,CAAC,WAAW,CAAC,IAAI,yCAAyC,CAAC,CAAC;SAC1G;QACD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9E,CAAC;IASD,mBAAmB,CAAC,IAA4D;QAI/E,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC;IAED;;;OAGG;IACH,eAAe,CAAC,GAAsB;QACrC,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,GAAwB;QACzC,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,iBAAiB;QAChB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,cAAc,CAAC;IACtC,CAAC;IAED,OAAO;QACN,OAAO,IAAI,CAAC,cAAc,CAAC;IAC5B,CAAC;IAES,cAAc;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;CACD;AAxDD,wCAwDC;AAED,SAAgB,UAAU,CAAsB,IAG/C;IACA,OAAO,CAAC,MAAM,EAAE,EAAE;QACjB,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACvD,OAAO,CAAC,cAAc,CAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,IAAI,0CAA4B,EAAE,MAAM,CAAC,CAAC;IACtG,CAAC,CAAC;AACH,CAAC;AARD,gCAQC","sourcesContent":["import 'reflect-metadata';\nimport { DEFAULT_DOCUMENT_TRANSFORMER, IDocumentTransformer } from './transformer';\nimport { CollectionIds, CollectionPath, DocumentIds } from './collections';\nimport { BaseModel, ModelDataOnly, ModelDataWithId, PatchUpdate } from './types';\n\nconst transformerMetaKey = 'firestore:transformer';\nconst pathMetaKey = 'firestore:path';\n\n/**\n * Base class for platform independent repositories. Contains methods accessing its metadata supplied\n * via the Typescript @Repository decorator\n */\nexport abstract class BaseRepository<T extends BaseModel, Path extends CollectionPath<any, any, any>, DocSnap> {\n\tprivate readonly collectionPath: Path;\n\tprivate readonly transformer: IDocumentTransformer<T>;\n\n\tprotected constructor() {\n\t\tthis.collectionPath = Reflect.getMetadata(pathMetaKey, this.constructor);\n\t\tif (!this.collectionPath) {\n\t\t\tthrow new Error(`Unable to get path for ${this.constructor.name}. Did you add the @Repository decorator`);\n\t\t}\n\t\tthis.transformer = Reflect.getMetadata(transformerMetaKey, this.constructor);\n\t}\n\n\tprotected abstract fromFirestoreToObject(snap: DocSnap): T | null;\n\n\ttoFirestoreDocument(doc: T): { id: string; data: ModelDataOnly<T> };\n\ttoFirestoreDocument(doc: ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>): {\n\t\tid: undefined;\n\t\tdata: ModelDataOnly<T>;\n\t};\n\ttoFirestoreDocument(data: T | ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>): {\n\t\tid: string | undefined;\n\t\tdata: ModelDataOnly<T>;\n\t} {\n\t\treturn this.getTransformer().toFirestoreDocument(data);\n\t}\n\n\t/**\n\t * Returns the path to the document as a string\n\t * @param ids - A map containing all ids up to the document itself\n\t */\n\tgetDocumentPath(ids: DocumentIds<Path>): string {\n\t\treturn this.getPath().doc(ids);\n\t}\n\n\t/**\n\t * Returns the path to the collection as a string\n\t * @param ids - A map containing all ids excluding the last documents id\n\t */\n\tgetCollectionPath(ids: CollectionIds<Path>) {\n\t\treturn this.getPath().collection(ids);\n\t}\n\n\t/**\n\t * Returns the standalone collection name\n\t */\n\tgetCollectionName() {\n\t\treturn this.getPath().collectionName;\n\t}\n\n\tgetPath(): Path {\n\t\treturn this.collectionPath;\n\t}\n\n\tprotected getTransformer(): IDocumentTransformer<T> {\n\t\treturn this.transformer;\n\t}\n}\n\nexport function Repository<T extends BaseModel>(args: {\n\tpath: CollectionPath<any, any, any>;\n\ttransformer?: IDocumentTransformer<T>;\n}): ClassDecorator {\n\treturn (target) => {\n\t\tReflect.defineMetadata(pathMetaKey, args.path, target);\n\t\tReflect.defineMetadata(transformerMetaKey, args.transformer || DEFAULT_DOCUMENT_TRANSFORMER, target);\n\t};\n}\n"]}