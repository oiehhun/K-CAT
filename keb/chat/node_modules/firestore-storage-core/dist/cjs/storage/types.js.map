{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/storage/types.ts"],"names":[],"mappings":"","sourcesContent":["declare const t: unique symbol;\nexport type Id<T> = string & { readonly [t]: T };\n\nexport interface BaseModel {\n\tid: string;\n\t_rawPath: string;\n}\n\ntype NonFunctionPropertyNames<T> = {\n\t[K in keyof T]: T[K] extends Function ? never : K;\n};\ntype NonFunctionProperties<T> = Pick<T, keyof NonFunctionPropertyNames<T>>;\n\ntype Clonable<T> = {\n\t[K in keyof NonFunctionProperties<T>]: T[K] extends object ? Clonable<T[K]> : T[K];\n};\n\nexport type ModelDataOnly<T> = Omit<T, keyof BaseModel>;\n\nexport type ModelDataWithId<T extends BaseModel> = Pick<T, 'id'> & ModelDataOnly<T>;\n\nexport type ModelQuery<T extends BaseModel> = Partial<ModelDataOnly<T>>;\n\nexport type PatchUpdate<T extends { id: string }> = Required<Pick<T, 'id'>> & Omit<Partial<T>, 'id'>;\n"]}