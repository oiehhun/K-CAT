{"version":3,"file":"collections.test.js","sourceRoot":"","sources":["../../../src/storage/collections.test.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAC5B,+CAA4D;AAE5D,QAAQ,CAAC,gBAAgB,EAAE;IAC1B,MAAM,QAAQ,GAAG,IAAI,4BAAc,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAC7D,MAAM,KAAK,GAAG,IAAI,4BAAc,CAAiD,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAE9G,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAChD,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QAClD,KAAK,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAChD,KAAK,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACtD,KAAK,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;YAClD,SAAS,EAAE,GAAG;YACd,MAAM,EAAE,GAAG;SACX,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC3C,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACpD,KAAK,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;YAC7C,SAAS,EAAE,GAAG;YACd,MAAM,EAAE,GAAG;SACX,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QACjD,IAAA,gBAAM,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QACxD,IAAA,gBAAM,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QAClD,IAAA,gBAAM,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC/C,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import should from 'should';\nimport { CollectionPath, DocumentIds } from './collections';\n\ndescribe('CollectionPath', function () {\n\tconst Accounts = new CollectionPath('accounts', 'accountId');\n\tconst Users = new CollectionPath<'userId', string, DocumentIds<typeof Accounts>>('users', 'userId', Accounts);\n\n\tit('should generate a path template', async () => {\n\t\tUsers.path().should.eql('/accounts/{accountId}/users/{userId}');\n\t});\n\n\tit('should generate a collection path', async () => {\n\t\tUsers.collection({ accountId: '1' }).should.eql('/accounts/1/users');\n\t});\n\n\tit('should generate a document path', async () => {\n\t\tUsers.doc({ accountId: '1', userId: '2' }).should.eql('/accounts/1/users/2');\n\t});\n\n\tit('should generate a map of document ids', async () => {\n\t\tUsers.toDocIds({ accountId: '1' }, '2').should.eql({\n\t\t\taccountId: '1',\n\t\t\tuserId: '2',\n\t\t});\n\t});\n\n\tit('should get collection name', async () => {\n\t\tUsers.collectionName.should.eql('users');\n\t});\n\n\tit('should parse a path and extract ids', async () => {\n\t\tUsers.parse('/accounts/1/users/2').should.eql({\n\t\t\taccountId: '1',\n\t\t\tuserId: '2',\n\t\t});\n\t});\n\n\tit('should fail to parse wrong paths', async () => {\n\t\tshould(() => Users.parse('/accounts/1/users/')).throw();\n\t\tshould(() => Users.parse('/accounts/1/')).throw();\n\t\tshould(() => Users.parse('/users/1')).throw();\n\t});\n});\n"]}