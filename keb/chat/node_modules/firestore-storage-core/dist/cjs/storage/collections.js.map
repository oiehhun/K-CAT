{"version":3,"file":"collections.js","sourceRoot":"","sources":["../../../src/storage/collections.ts"],"names":[],"mappings":";;;AA4BA,MAAa,cAAc;IAC1B,YACiB,cAAsB,EACtB,KAAY,EACpB,MAAsC;QAF9B,mBAAc,GAAd,cAAc,CAAQ;QACtB,UAAK,GAAL,KAAK,CAAO;QACpB,WAAM,GAAN,MAAM,CAAgC;IAC5C,CAAC;IAEJ;;OAEG;IACH,IAAI;QACH,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,KAAK,GAAG,CAAC;IAC1F,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,GAAM;QAChB,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;IAC5E,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,GAAsB;QACzB,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,EAAE,EAAE;YACR,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,WAAW,IAAI,CAAC,KAAK,SAAS,CAAC,CAAC;SAChD;QACD,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAA0B,CAAC,IAAI,EAAE,EAAE,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,GAAwB,EAAE,KAAa;QAC/C,OAAO;YACN,GAAG,GAAG;YACN,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK;SACE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,IAAY;QACjB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9B,0BAA0B;QAC1B,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACnB;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,KAAK,CAAsB,CAAC;IACvD,CAAC;IAES,SAAS,CAA8B,GAAe,EAAE,IAAc;QAC/E,IAAI,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SACjC;QACD,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;YAC9E,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,CAAQ,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAClB,OAAO,GAAG,CAAC;SACX;QACD,MAAM,IAAI,KAAK,CAAC,wBAAwB,IAAI,CAAC,cAAc,SAAS,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACvF,CAAC;CACD;AAnED,wCAmEC","sourcesContent":["/**\n * A generic type used to generate a new type from a given collection path. The generated type is\n * a map with keys for each id of this path leading up to this collection.\n */\nexport type CollectionIds<C extends CollectionPath<any, any, any>, D = void> = C extends CollectionPath<\n\tinfer IdKey,\n\tinfer IdType,\n\tinfer P\n>\n\t? P\n\t: D;\n\n/**\n * A generic type used to generate a new type from a given collection path. The generated type is\n * a map with keys for each id of this path leading up to a document in this collection.\n */\nexport type DocumentIds<C extends CollectionPath<any, any, any>> = C extends CollectionPath<\n\tinfer IdKey,\n\tinfer IdType,\n\tinfer P\n>\n\t? P extends void\n\t\t? { [k in IdKey]: IdType }\n\t\t: P & {\n\t\t\t\t[k in IdKey]: IdType;\n\t\t  }\n\t: never;\n\nexport class CollectionPath<IdKey extends string, IdType extends string, P extends object | void = void> {\n\tconstructor(\n\t\tpublic readonly collectionName: string,\n\t\tpublic readonly idKey: IdKey,\n\t\tprivate parent?: CollectionPath<any, any, any>\n\t) {}\n\n\t/**\n\t * @returns The path as a template. e.g. /accounts/{accountId}/users/{userId}\n\t */\n\tpath(): string {\n\t\treturn `${this.parent ? this.parent.path() : ''}/${this.collectionName}/{${this.idKey}}`;\n\t}\n\n\t/**\n\t * Generates the path to this collection\n\t * @param ids Ids of all parent documents\n\t */\n\tcollection(ids: P): string {\n\t\treturn `${this.parent ? this.parent.doc(ids) : ''}/${this.collectionName}`;\n\t}\n\n\t/**\n\t * Generates the path to a single document in this collection\n\t * @param ids Ids of this document and all parent documents\n\t */\n\tdoc(ids: DocumentIds<this>): string {\n\t\tconst id = ids[this.idKey];\n\t\tif (!id) {\n\t\t\tconsole.error(ids);\n\t\t\tthrow new Error(`Missing ${this.idKey} in ids`);\n\t\t}\n\t\treturn `${this.collection(ids as CollectionIds<this>)}/${id}`;\n\t}\n\n\t/**\n\t * Generates an id map for a document in this collection including all parent document ids\n\t * @param ids\n\t * @param docId\n\t */\n\ttoDocIds(ids: CollectionIds<this>, docId: IdType): DocumentIds<this> {\n\t\treturn {\n\t\t\t...ids,\n\t\t\t[this.idKey]: docId,\n\t\t} as DocumentIds<this>;\n\t}\n\n\tparse(path: string): DocumentIds<this> {\n\t\tconst parts = path.split('/');\n\t\t// Remove optional first /\n\t\tif (parts[0] === '') {\n\t\t\tparts.splice(0, 1);\n\t\t}\n\t\treturn this.extractId({}, parts) as DocumentIds<this>;\n\t}\n\n\tprotected extractId<T extends DocumentIds<this>>(map: Partial<T>, path: string[]): Partial<T> {\n\t\tif (this.parent) {\n\t\t\tthis.parent.extractId(map, path);\n\t\t}\n\t\tif (path[0] === this.collectionName && path[1] && typeof path[1] === 'string') {\n\t\t\tmap[this.idKey] = path[1] as any;\n\t\t\tpath.splice(0, 2);\n\t\t\treturn map;\n\t\t}\n\t\tthrow new Error(`Unable to get id for ${this.collectionName} from ${path.join('/')}`);\n\t}\n}\n"]}