/**
 * A generic type used to generate a new type from a given collection path. The generated type is
 * a map with keys for each id of this path leading up to this collection.
 */
export type CollectionIds<C extends CollectionPath<any, any, any>, D = void> = C extends CollectionPath<infer IdKey, infer IdType, infer P> ? P : D;
/**
 * A generic type used to generate a new type from a given collection path. The generated type is
 * a map with keys for each id of this path leading up to a document in this collection.
 */
export type DocumentIds<C extends CollectionPath<any, any, any>> = C extends CollectionPath<infer IdKey, infer IdType, infer P> ? P extends void ? {
    [k in IdKey]: IdType;
} : P & {
    [k in IdKey]: IdType;
} : never;
export declare class CollectionPath<IdKey extends string, IdType extends string, P extends object | void = void> {
    readonly collectionName: string;
    readonly idKey: IdKey;
    private parent?;
    constructor(collectionName: string, idKey: IdKey, parent?: CollectionPath<any, any, any> | undefined);
    /**
     * @returns The path as a template. e.g. /accounts/{accountId}/users/{userId}
     */
    path(): string;
    /**
     * Generates the path to this collection
     * @param ids Ids of all parent documents
     */
    collection(ids: P): string;
    /**
     * Generates the path to a single document in this collection
     * @param ids Ids of this document and all parent documents
     */
    doc(ids: DocumentIds<this>): string;
    /**
     * Generates an id map for a document in this collection including all parent document ids
     * @param ids
     * @param docId
     */
    toDocIds(ids: CollectionIds<this>, docId: IdType): DocumentIds<this>;
    parse(path: string): DocumentIds<this>;
    protected extractId<T extends DocumentIds<this>>(map: Partial<T>, path: string[]): Partial<T>;
}
//# sourceMappingURL=collections.d.ts.map