import 'reflect-metadata';
import { IDocumentTransformer } from './transformer';
import { CollectionIds, CollectionPath, DocumentIds } from './collections';
import { BaseModel, ModelDataOnly, ModelDataWithId, PatchUpdate } from './types';
/**
 * Base class for platform independent repositories. Contains methods accessing its metadata supplied
 * via the Typescript @Repository decorator
 */
export declare abstract class BaseRepository<T extends BaseModel, Path extends CollectionPath<any, any, any>, DocSnap> {
    private readonly collectionPath;
    private readonly transformer;
    protected constructor();
    protected abstract fromFirestoreToObject(snap: DocSnap): T | null;
    toFirestoreDocument(doc: T): {
        id: string;
        data: ModelDataOnly<T>;
    };
    toFirestoreDocument(doc: ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>): {
        id: undefined;
        data: ModelDataOnly<T>;
    };
    /**
     * Returns the path to the document as a string
     * @param ids - A map containing all ids up to the document itself
     */
    getDocumentPath(ids: DocumentIds<Path>): string;
    /**
     * Returns the path to the collection as a string
     * @param ids - A map containing all ids excluding the last documents id
     */
    getCollectionPath(ids: CollectionIds<Path>): string;
    /**
     * Returns the standalone collection name
     */
    getCollectionName(): string;
    getPath(): Path;
    protected getTransformer(): IDocumentTransformer<T>;
}
export declare function Repository<T extends BaseModel>(args: {
    path: CollectionPath<any, any, any>;
    transformer?: IDocumentTransformer<T>;
}): ClassDecorator;
//# sourceMappingURL=repository.d.ts.map