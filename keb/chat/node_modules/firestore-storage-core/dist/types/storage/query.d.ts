import { BaseModel, ModelQuery } from './types';
export type WhereProp<T extends BaseModel> = string | ((t: T) => unknown);
export declare abstract class BaseQuery<T extends BaseModel, Op extends string, R> {
    protected abstract applyWhere(key: string, operator: Op, value: any): this;
    abstract execute(): R;
    where(prop: WhereProp<T>, op: Op, value: any): this;
    whereAll<K extends ModelQuery<T>>(attributes: K | null): this;
    protected getWhereProp(prop: WhereProp<T>): string;
    equals(prop: WhereProp<T>, value: any): this;
}
//# sourceMappingURL=query.d.ts.map