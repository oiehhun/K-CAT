{"version":3,"file":"repository.js","sourceRoot":"","sources":["../../../src/lib/storage/repository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tBaseRepository as CoreBaseRepository,\n\tCollectionIds,\n\tCollectionPath,\n\tDocumentIds,\n\tBaseModel,\n\tModelQuery,\n\tPatchUpdate,\n\tModelDataOnly,\n\tFirestoreStorageError,\n\tModelDataWithId,\n} from 'firestore-storage-core';\nimport { Query } from './query';\nimport { DocumentReference, DocumentSnapshot, Firestore } from '@google-cloud/firestore';\nimport { applyToDoc } from './utils';\nimport { IDocumentTransformer } from 'firestore-storage-core/dist/cjs';\n\nexport abstract class BaseRepository<\n\tT extends BaseModel,\n\tPath extends CollectionPath<any, any, any>\n> extends CoreBaseRepository<T, Path, DocumentSnapshot<T>> {\n\tconstructor(protected firestore: Firestore) {\n\t\tsuper();\n\t}\n\n\tfromFirestoreToObject(snapshot: DocumentSnapshot<T>) {\n\t\tif (!snapshot.exists) {\n\t\t\treturn null;\n\t\t}\n\t\tconst transformer: IDocumentTransformer<T> = this.getTransformer();\n\t\treturn transformer.fromFirestoreToObject(snapshot.data() as ModelDataOnly<T>, {\n\t\t\tid: snapshot.id,\n\t\t\trawPath: snapshot.ref.path,\n\t\t});\n\t}\n\n\t/**\n\t *\n\t */\n\tasync findById(ids: DocumentIds<Path>): Promise<T | null> {\n\t\tconst doc = await this.firestore.doc(this.getDocumentPath(ids)).get();\n\t\treturn this.fromFirestoreToObject(doc as any);\n\t}\n\n\tasync getById(ids: DocumentIds<Path>): Promise<T> {\n\t\tconst doc = await this.findById(ids);\n\t\tif (doc) {\n\t\t\treturn doc;\n\t\t}\n\t\tthrow new FirestoreStorageError(this.getPath().path(), ids);\n\t}\n\n\tasync find(attributes: ModelQuery<T>, ids: CollectionIds<Path>): Promise<T | null> {\n\t\tconst documents = await this.list(attributes, ids);\n\t\treturn documents[0] || null;\n\t}\n\n\tasync get(attributes: ModelQuery<T>, ids: CollectionIds<Path>): Promise<T> {\n\t\tconst doc = await this.find(attributes, ids);\n\t\tif (doc) {\n\t\t\treturn doc;\n\t\t}\n\t\tthrow new FirestoreStorageError(this.getPath().path(), ids);\n\t}\n\n\tlist(attributes: ModelQuery<T> | null, ids: CollectionIds<Path>): Promise<T[]> {\n\t\treturn this.query((q) => {\n\t\t\treturn q.whereAll(attributes);\n\t\t}, ids);\n\t}\n\n\tasync query(cb: (qb: Query<T>) => Query<T>, ids: CollectionIds<Path>): Promise<T[]> {\n\t\tconst path = this.getCollectionPath(ids);\n\t\tconst query = new Query<T>(this.firestore.collection(path));\n\t\tconst result = await cb(query).execute();\n\t\tif (result.empty) {\n\t\t\treturn [];\n\t\t}\n\t\treturn result.docs.map((doc) => {\n\t\t\treturn this.fromFirestoreToObject(doc)!;\n\t\t});\n\t}\n\n\tasync groupQuery(cb?: (qb: Query<T>) => Query<T>): Promise<T[]> {\n\t\tconst group = this.firestore.collectionGroup(this.getCollectionName());\n\t\tconst result = await (cb ? cb(new Query<T>(group)).execute() : group.get());\n\t\tif (result.empty) {\n\t\t\treturn [];\n\t\t}\n\t\treturn result.docs.map((doc) => {\n\t\t\treturn this.fromFirestoreToObject(doc as any)!;\n\t\t});\n\t}\n\n\tasync findAll(documentIds: string[], ids: CollectionIds<Path>): Promise<(T | null)[]> {\n\t\tif (documentIds.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst path = this.getCollectionPath(ids);\n\t\tconst docRefs: DocumentReference[] = documentIds.map((id) => {\n\t\t\treturn this.firestore.collection(path).doc(id);\n\t\t});\n\t\tconst result = await this.firestore.getAll(...docRefs);\n\t\treturn result.map((document) => {\n\t\t\treturn this.fromFirestoreToObject(document as any);\n\t\t});\n\t}\n\n\tasync getAll(documentIds: string[], ids: CollectionIds<Path>): Promise<T[]> {\n\t\tconst all = await this.findAll(documentIds, ids);\n\t\tfor (const id of documentIds) {\n\t\t\tconst doc = all.find((d) => d?.id === id);\n\t\t\tif (!doc) {\n\t\t\t\tthrow new FirestoreStorageError(this.getPath().path(), ids);\n\t\t\t}\n\t\t}\n\t\treturn all;\n\t}\n\n\tasync count(cb: (qb: Query<T>) => Query<T>, ids: CollectionIds<Path>) {\n\t\tconst path = this.getCollectionPath(ids);\n\t\tconst query = new Query<T>(this.firestore.collection(path));\n\t\tconst result = await cb(query).count().get();\n\t\treturn result.data().count;\n\t}\n\n\tasync create(data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): Promise<T> {\n\t\treturn this.applyToDocRef(data, ids, (doc, data) => {\n\t\t\treturn doc.create(data);\n\t\t});\n\t}\n\n\t/**@deprecated use upsert instead*/\n\tasync save(data: T | ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>, ids: CollectionIds<Path>): Promise<T> {\n\t\treturn this.applyToDocRef(data, ids, (doc, data) => {\n\t\t\treturn doc.set(data, {\n\t\t\t\tmerge: true,\n\t\t\t});\n\t\t});\n\t}\n\n\tasync upsert(data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): Promise<T> {\n\t\treturn this.applyToDocRef(data, ids, (doc, data) => {\n\t\t\treturn doc.set(data, {\n\t\t\t\tmerge: true,\n\t\t\t});\n\t\t});\n\t}\n\n\tasync write(data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): Promise<T> {\n\t\treturn this.applyToDocRef(data, ids, (doc, data) => {\n\t\t\treturn doc.set(data, {\n\t\t\t\tmerge: false,\n\t\t\t});\n\t\t});\n\t}\n\n\tasync update(data: T | PatchUpdate<ModelDataWithId<T>>, ids: CollectionIds<Path>): Promise<T> {\n\t\treturn this.applyToDocRef(data, ids, (doc, data) => {\n\t\t\treturn doc.update(data);\n\t\t});\n\t}\n\n\tprivate async applyToDocRef(\n\t\tdata: T | ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>,\n\t\tids: CollectionIds<Path>,\n\t\tcb: (doc: DocumentReference, data: ModelDataOnly<T>) => Promise<any>\n\t) {\n\t\treturn applyToDoc(this.firestore, this, data, ids, async (id, data, docRef) => {\n\t\t\ttry {\n\t\t\t\tawait cb(docRef, data);\n\t\t\t} catch (err) {\n\t\t\t\tthrow new FirestoreStorageError(this.getPath().path(), ids, err.message);\n\t\t\t}\n\t\t\tconst doc = await docRef.get();\n\t\t\treturn this.fromFirestoreToObject(doc as DocumentSnapshot<T>);\n\t\t});\n\t}\n\n\tasync delete(ids: DocumentIds<Path>): Promise<void> {\n\t\tconst path = this.getDocumentPath(ids);\n\t\tawait this.firestore.doc(path).delete();\n\t}\n\n\tgenerateId() {\n\t\treturn this.firestore.collection('any').doc().id;\n\t}\n}\n"]}