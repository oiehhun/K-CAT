{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../src/lib/storage/query.ts"],"names":[],"mappings":";;;AAQA,mEAAyE;AAEzE,MAAa,KAA2B,SAAQ,kCAAsD;IACrG,YAAoB,IAAqD;QACxE,KAAK,EAAE,CAAC;QADW,SAAI,GAAJ,IAAI,CAAiD;IAEzE,CAAC;IAES,UAAU,CAAC,GAAW,EAAE,QAAyC,EAAE,KAAU;QACtF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,OAAO,CAAC,IAAkB,EAAE,SAA2B;QACtD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;IACb,CAAC;IAED,KAAK,CAAC,KAAa;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,CAAC,MAAc;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC;IACb,CAAC;IAED,OAAO;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAS,CAAC;IAC/B,CAAC;IAED,KAAK;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;CACD;AApCD,sBAoCC","sourcesContent":["import {\n\tCollectionGroup,\n\tCollectionReference,\n\tOrderByDirection,\n\tQuerySnapshot,\n\tWhereFilterOp,\n\tQuery as FSQuery,\n} from '@google-cloud/firestore';\nimport { BaseQuery, BaseModel, WhereProp } from 'firestore-storage-core';\n\nexport class Query<T extends BaseModel> extends BaseQuery<T, WhereFilterOp, Promise<QuerySnapshot<T>>> {\n\tconstructor(private base: CollectionReference | CollectionGroup | FSQuery) {\n\t\tsuper();\n\t}\n\n\tprotected applyWhere(key: string, operator: FirebaseFirestore.WhereFilterOp, value: any) {\n\t\tthis.base = this.base.where(key, operator, value);\n\t\treturn this;\n\t}\n\n\torderBy(prop: WhereProp<T>, direction: OrderByDirection) {\n\t\tthis.base = this.base.orderBy(this.getWhereProp(prop), direction);\n\t\treturn this;\n\t}\n\n\tlimit(limit: number) {\n\t\tthis.base = this.base.limit(limit);\n\t\treturn this;\n\t}\n\n\toffset(offset: number) {\n\t\tthis.base = this.base.offset(offset);\n\t\treturn this;\n\t}\n\n\texecute(): Promise<QuerySnapshot<T>> {\n\t\treturn this.base.get() as any;\n\t}\n\n\tcount() {\n\t\treturn this.base.count();\n\t}\n\n\tgetQuery() {\n\t\treturn this.base;\n\t}\n}\n"]}