"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runFirestoreTransaction = exports.FirestoreTransaction = void 0;
const firestore_storage_core_1 = require("firestore-storage-core");
const utils_1 = require("./utils");
const query_1 = require("./query");
class FirestoreTransaction {
    constructor(firestore, transaction) {
        this.firestore = firestore;
        this.transaction = transaction;
    }
    async findById(repo, ids) {
        const doc = this.firestore.doc(repo.getDocumentPath(ids));
        const data = await this.transaction.get(doc);
        if (data.exists) {
            return repo.fromFirestoreToObject(data);
        }
        return null;
    }
    /** @deprecated Use findById() instead */
    async find(repo, ids) {
        return this.findById(repo, ids);
    }
    async getById(repo, ids) {
        const doc = await this.findById(repo, ids);
        if (!doc) {
            throw new firestore_storage_core_1.FirestoreStorageError(repo.getPath().path(), ids);
        }
        return doc;
    }
    /** @deprecated Use getById() instead */
    async get(repo, ids) {
        return this.getById(repo, ids);
    }
    async query(repo, cb, ids) {
        const path = repo.getCollectionPath(ids);
        const query = cb(new query_1.Query(this.firestore.collection(path))).getQuery();
        const documents = await this.transaction.get(query);
        return documents.docs.map((doc) => {
            return repo.fromFirestoreToObject(doc);
        });
    }
    create(repo, data, ids) {
        return this.applyToDoc(repo, data, ids, (id, data, doc) => {
            this.transaction.create(doc, data);
        });
    }
    save(repo, data, ids) {
        return this.applyToDoc(repo, data, ids, (id, data, doc) => {
            this.transaction.set(doc, data, { merge: true });
        });
    }
    write(repo, data, ids) {
        return this.applyToDoc(repo, data, ids, (id, data, doc) => {
            this.transaction.set(doc, data, { merge: false });
        });
    }
    update(repo, data, ids) {
        return this.applyToDoc(repo, data, ids, (id, data, doc) => {
            this.transaction.update(doc, data);
        });
    }
    delete(repo, ids) {
        const ref = this.firestore.doc(repo.getDocumentPath(ids));
        this.transaction.delete(ref);
        return this;
    }
    applyToDoc(repo, data, ids, cb) {
        return (0, utils_1.applyToDoc)(this.firestore, repo, data, ids, (id, data, doc) => {
            cb(id, data, doc);
            return this;
        });
    }
}
exports.FirestoreTransaction = FirestoreTransaction;
function runFirestoreTransaction(firestore, cb) {
    return firestore.runTransaction(async (t) => {
        const trx = new FirestoreTransaction(firestore, t);
        return cb(trx);
    });
}
exports.runFirestoreTransaction = runFirestoreTransaction;
//# sourceMappingURL=transaction.js.map