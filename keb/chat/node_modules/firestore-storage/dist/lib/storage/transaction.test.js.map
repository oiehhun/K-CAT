{"version":3,"file":"transaction.test.js","sourceRoot":"","sources":["../../../src/lib/storage/transaction.test.ts"],"names":[],"mappings":";;AAAA,yDAA+G;AAC/G,6CAAoD;AACpD,+CAAwD;AAExD,kBAAgB;AAEhB,QAAQ,CAAC,aAAa,EAAE;IACvB,IAAI,SAAoB,CAAC;IACzB,IAAI,SAA0B,CAAC;IAC/B,IAAI,WAA8B,CAAC;IACnC,IAAI,QAAwB,CAAC;IAE7B,IAAA,iCAAoB,EAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE;QAChC,SAAS,GAAG,CAAC,CAAC;QACd,SAAS,GAAG,IAAI,kCAAe,CAAC,SAAS,CAAC,CAAC;QAC3C,QAAQ,GAAG,IAAI,iCAAc,CAAC,SAAS,CAAC,CAAC;QACzC,WAAW,GAAG,IAAI,oCAAiB,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,GAAG,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC;YACpC,IAAI,EAAE,MAAM;SACZ,CAAC,CAAC;QAEH,MAAM,IAAA,qCAAuB,EAAC,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;YACtD,MAAM,CAAC,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YAChE,GAAG,CAAC,MAAM,CACT,WAAW,EACX;gBACC,IAAI,EAAE,CAAC,CAAC,IAAI,GAAG,GAAG;aAClB,EACD,SAAS,CACT,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,MAAM,GAAG,KAAK,EAAE,IAAY,EAAE,EAAE;YACrC,MAAM,GAAG,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC;gBACpC,IAAI;aACJ,CAAC,CAAC;YACH,OAAO,GAAG,CAAC,EAAE,CAAC;QACf,CAAC,CAAC;QAEF,MAAM,MAAM,GAAG,OAAO,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAEnC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC1C,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC;YACxB,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC;YACxB,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC;YACxB,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC;SACxB,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,MAAM,IAAA,qCAAuB,EAAC,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;YAClE,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,KAAK,CAC/B,WAAW,EACX,CAAC,EAAE,EAAE,EAAE;gBACN,OAAO,EAAE,CAAC,QAAQ,CAAC;oBAClB,IAAI,EAAE,MAAM,GAAG,OAAO;iBACtB,CAAC,CAAC;YACJ,CAAC,EACD,SAAS,CACT,CAAC;YACF,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { Account, AccountRepository, AccountsPath, ModelRepository, UserRepository } from './definitions.test';\nimport { createFirestoreTests } from './test-utils';\nimport { runFirestoreTransaction } from './transaction';\nimport { Firestore } from '@google-cloud/firestore';\nimport 'should';\n\ndescribe('Transaction', function () {\n\tlet firestore: Firestore;\n\tlet modelRepo: ModelRepository;\n\tlet accountRepo: AccountRepository;\n\tlet userRepo: UserRepository;\n\n\tcreateFirestoreTests(this, (f) => {\n\t\tfirestore = f;\n\t\tmodelRepo = new ModelRepository(firestore);\n\t\tuserRepo = new UserRepository(firestore);\n\t\taccountRepo = new AccountRepository(firestore);\n\t});\n\n\tit('should create a document', async () => {\n\t\tconst acc = await accountRepo.create({\n\t\t\tname: 'Test',\n\t\t});\n\n\t\tawait runFirestoreTransaction(firestore, async (trx) => {\n\t\t\tconst a = await trx.getById(accountRepo, { accountId: acc.id });\n\t\t\ttrx.create(\n\t\t\t\taccountRepo,\n\t\t\t\t{\n\t\t\t\t\tname: a.name + '2',\n\t\t\t\t},\n\t\t\t\tundefined\n\t\t\t);\n\t\t});\n\t});\n\n\tit('should query documents', async () => {\n\t\tconst create = async (name: string) => {\n\t\t\tconst acc = await accountRepo.create({\n\t\t\t\tname,\n\t\t\t});\n\t\t\treturn acc.id;\n\t\t};\n\n\t\tconst prefix = `acc-${Date.now()}`;\n\n\t\tconst [a1, a2, a3, a4] = await Promise.all([\n\t\t\tcreate(prefix + 'Test1'),\n\t\t\tcreate(prefix + 'Test2'),\n\t\t\tcreate(prefix + 'Test3'),\n\t\t\tcreate(prefix + 'Test1'),\n\t\t]);\n\n\t\tconst ids = await runFirestoreTransaction(firestore, async (trx) => {\n\t\t\tconst accounts = await trx.query(\n\t\t\t\taccountRepo,\n\t\t\t\t(qb) => {\n\t\t\t\t\treturn qb.whereAll({\n\t\t\t\t\t\tname: prefix + 'Test1',\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tundefined\n\t\t\t);\n\t\t\treturn accounts.map((a) => a.id);\n\t\t});\n\t\tids.sort().should.eql([a1, a4].sort());\n\t});\n});\n"]}