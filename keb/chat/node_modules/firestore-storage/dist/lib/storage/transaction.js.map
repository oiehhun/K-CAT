{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../src/lib/storage/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentReference, DocumentSnapshot, Firestore, Transaction } from '@google-cloud/firestore';\nimport {\n\tModelDataOnly,\n\tBaseModel,\n\tCollectionPath,\n\tCollectionIds,\n\tFirestoreStorageError,\n\tDocumentIds,\n\tPatchUpdate,\n\tModelDataWithId,\n} from 'firestore-storage-core';\nimport { BaseRepository } from './repository';\nimport { applyToDoc } from './utils';\nimport { Query } from './query';\n\nexport class FirestoreTransaction {\n\tconstructor(private firestore: Firestore, private transaction: Transaction) {}\n\n\tasync findById<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tids: DocumentIds<Path>\n\t): Promise<T | null> {\n\t\tconst doc = this.firestore.doc(repo.getDocumentPath(ids));\n\t\tconst data = await this.transaction.get(doc);\n\t\tif (data.exists) {\n\t\t\treturn repo.fromFirestoreToObject(data as DocumentSnapshot<T>);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** @deprecated Use findById() instead */\n\tasync find<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tids: DocumentIds<Path>\n\t): Promise<T | null> {\n\t\treturn this.findById(repo, ids);\n\t}\n\n\tasync getById<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tids: DocumentIds<Path>\n\t): Promise<T> {\n\t\tconst doc = await this.findById(repo, ids);\n\t\tif (!doc) {\n\t\t\tthrow new FirestoreStorageError(repo.getPath().path(), ids);\n\t\t}\n\t\treturn doc;\n\t}\n\n\t/** @deprecated Use getById() instead */\n\tasync get<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tids: DocumentIds<Path>\n\t): Promise<T> {\n\t\treturn this.getById(repo, ids);\n\t}\n\n\tasync query<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tcb: (qb: Query<T>) => Query<T>,\n\t\tids: CollectionIds<Path>\n\t): Promise<T[]> {\n\t\tconst path = repo.getCollectionPath(ids);\n\t\tconst query = cb(new Query<T>(this.firestore.collection(path))).getQuery();\n\t\tconst documents = await this.transaction.get(query);\n\t\treturn documents.docs.map((doc) => {\n\t\t\treturn repo.fromFirestoreToObject(doc as DocumentSnapshot<T>);\n\t\t});\n\t}\n\n\tcreate<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tdata: T | ModelDataOnly<T>,\n\t\tids: CollectionIds<Path>\n\t): FirestoreTransaction {\n\t\treturn this.applyToDoc(repo, data, ids, (id, data, doc) => {\n\t\t\tthis.transaction.create(doc, data);\n\t\t});\n\t}\n\n\tsave<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tdata: T | ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>,\n\t\tids: CollectionIds<Path>\n\t): FirestoreTransaction {\n\t\treturn this.applyToDoc(repo, data, ids, (id, data, doc) => {\n\t\t\tthis.transaction.set(doc, data, { merge: true });\n\t\t});\n\t}\n\n\twrite<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tdata: T | ModelDataOnly<T>,\n\t\tids: CollectionIds<Path>\n\t): FirestoreTransaction {\n\t\treturn this.applyToDoc(repo, data, ids, (id, data, doc) => {\n\t\t\tthis.transaction.set(doc, data, { merge: false });\n\t\t});\n\t}\n\n\tupdate<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tdata: T | ModelDataOnly<T>,\n\t\tids: CollectionIds<Path>\n\t): FirestoreTransaction {\n\t\treturn this.applyToDoc(repo, data, ids, (id, data, doc) => {\n\t\t\tthis.transaction.update(doc, data);\n\t\t});\n\t}\n\n\tdelete<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tids: DocumentIds<Path>\n\t): FirestoreTransaction {\n\t\tconst ref = this.firestore.doc(repo.getDocumentPath(ids));\n\t\tthis.transaction.delete(ref);\n\t\treturn this;\n\t}\n\n\tprivate applyToDoc<T extends BaseModel, Path extends CollectionPath<any, any, any>>(\n\t\trepo: BaseRepository<T, Path>,\n\t\tdata: T | ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>,\n\t\tids: CollectionIds<Path>,\n\t\tcb: (id: string, data: ModelDataOnly<T>, doc: DocumentReference) => void\n\t) {\n\t\treturn applyToDoc(this.firestore, repo, data, ids, (id, data, doc) => {\n\t\t\tcb(id, data, doc);\n\t\t\treturn this;\n\t\t});\n\t}\n}\n\nexport function runFirestoreTransaction<T>(\n\tfirestore: Firestore,\n\tcb: (trx: FirestoreTransaction) => Promise<T>\n): Promise<T> {\n\treturn firestore.runTransaction(async (t) => {\n\t\tconst trx = new FirestoreTransaction(firestore, t);\n\t\treturn cb(trx);\n\t});\n}\n"]}