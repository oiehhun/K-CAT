import { Firestore, Transaction } from '@google-cloud/firestore';
import { ModelDataOnly, BaseModel, CollectionPath, CollectionIds, DocumentIds, PatchUpdate, ModelDataWithId } from 'firestore-storage-core';
import { BaseRepository } from './repository';
import { Query } from './query';
export declare class FirestoreTransaction {
    private firestore;
    private transaction;
    constructor(firestore: Firestore, transaction: Transaction);
    findById<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, ids: DocumentIds<Path>): Promise<T | null>;
    /** @deprecated Use findById() instead */
    find<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, ids: DocumentIds<Path>): Promise<T | null>;
    getById<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, ids: DocumentIds<Path>): Promise<T>;
    /** @deprecated Use getById() instead */
    get<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, ids: DocumentIds<Path>): Promise<T>;
    query<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, cb: (qb: Query<T>) => Query<T>, ids: CollectionIds<Path>): Promise<T[]>;
    create<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): FirestoreTransaction;
    save<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, data: T | ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>, ids: CollectionIds<Path>): FirestoreTransaction;
    write<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): FirestoreTransaction;
    update<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): FirestoreTransaction;
    delete<T extends BaseModel, Path extends CollectionPath<any, any, any>>(repo: BaseRepository<T, Path>, ids: DocumentIds<Path>): FirestoreTransaction;
    private applyToDoc;
}
export declare function runFirestoreTransaction<T>(firestore: Firestore, cb: (trx: FirestoreTransaction) => Promise<T>): Promise<T>;
//# sourceMappingURL=transaction.d.ts.map