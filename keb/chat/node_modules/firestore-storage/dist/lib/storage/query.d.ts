import { CollectionGroup, CollectionReference, OrderByDirection, QuerySnapshot, WhereFilterOp, Query as FSQuery } from '@google-cloud/firestore';
import { BaseQuery, BaseModel, WhereProp } from 'firestore-storage-core';
export declare class Query<T extends BaseModel> extends BaseQuery<T, WhereFilterOp, Promise<QuerySnapshot<T>>> {
    private base;
    constructor(base: CollectionReference | CollectionGroup | FSQuery);
    protected applyWhere(key: string, operator: FirebaseFirestore.WhereFilterOp, value: any): this;
    orderBy(prop: WhereProp<T>, direction: OrderByDirection): this;
    limit(limit: number): this;
    offset(offset: number): this;
    execute(): Promise<QuerySnapshot<T>>;
    count(): FirebaseFirestore.AggregateQuery<{
        count: FirebaseFirestore.AggregateField<number>;
    }>;
    getQuery(): CollectionReference<FirebaseFirestore.DocumentData> | FSQuery<FirebaseFirestore.DocumentData> | CollectionGroup<FirebaseFirestore.DocumentData>;
}
//# sourceMappingURL=query.d.ts.map