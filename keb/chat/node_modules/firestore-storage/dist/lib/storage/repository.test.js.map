{"version":3,"file":"repository.test.js","sourceRoot":"","sources":["../../../src/lib/storage/repository.test.ts"],"names":[],"mappings":"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","sourcesContent":["import 'should';\nimport { FirestoreStorageError } from 'firestore-storage-core';\nimport { AccountId, AccountRepository, ModelRepository, UserRepository } from './definitions.test';\nimport { createFirestoreTests } from './test-utils';\n\ndescribe('Repository', function () {\n\tlet modelRepo: ModelRepository;\n\tlet accountRepo: AccountRepository;\n\tlet userRepo: UserRepository;\n\n\tcreateFirestoreTests(this, (firestore) => {\n\t\tmodelRepo = new ModelRepository(firestore);\n\t\tuserRepo = new UserRepository(firestore);\n\t\taccountRepo = new AccountRepository(firestore);\n\t});\n\n\tdescribe('#findById()', function () {\n\t\tit('should return null for non existing document', async () => {\n\t\t\tawait accountRepo.findById({ accountId: 'acc' as AccountId }).should.resolvedWith(null);\n\t\t});\n\n\t\tit('should return document', async () => {\n\t\t\tconst acc = await accountRepo.save({ name: 'acc' });\n\t\t\tawait accountRepo.findById({ accountId: acc.id }).should.resolvedWith(acc);\n\t\t});\n\t});\n\n\tdescribe('#getById()', function () {\n\t\tit('should throw a FirestoreStorageError when a document was not found ', async () => {\n\t\t\tconst err = await accountRepo.getById({ accountId: 'acc' as AccountId }).should.rejected();\n\t\t\terr.should.instanceof(FirestoreStorageError);\n\t\t});\n\t});\n\n\tdescribe('#findAll()', function () {\n\t\tit('should find a set of documents', async () => {\n\t\t\tconst ids = {\n\t\t\t\taccountId: 'acc1' as AccountId,\n\t\t\t};\n\t\t\tconst u1 = await userRepo.save({ userName: 'U1' }, ids);\n\t\t\tconst u2 = await userRepo.save({ userName: 'U2' }, ids);\n\n\t\t\tconst users = await userRepo.findAll([u1.id, u2.id], ids);\n\t\t\tusers.should.eql([u1, u2]);\n\t\t});\n\n\t\tit(\"should return null if a document doesn't exist\", async () => {\n\t\t\tconst accounts = await accountRepo.findAll(['id']);\n\t\t\taccounts.should.eql([null]);\n\t\t});\n\t});\n\n\tdescribe('#query()', function () {\n\t\tit('should query documents based on sub-field', async () => {\n\t\t\tconst ids = {\n\t\t\t\taccountId: 'acc1' as AccountId,\n\t\t\t};\n\n\t\t\tconst u1 = await userRepo.save({ userName: 'u1', address: { city: 'Vienna' } }, ids);\n\t\t\tconst u2 = await userRepo.save({ userName: 'u2', address: { city: 'Vienna' } }, ids);\n\t\t\tconst u3 = await userRepo.save({ userName: 'u3', address: { city: 'Berlin' } }, ids);\n\n\t\t\tconst users = await userRepo.query((qb) => {\n\t\t\t\treturn qb.where((u) => u.address.city, '==', 'Vienna');\n\t\t\t}, ids);\n\n\t\t\tusers.should.length(2);\n\t\t\tusers.find((u) => u.id === u1.id).should.not.undefined();\n\t\t\tusers.find((u) => u.id === u2.id).should.not.undefined();\n\t\t});\n\t});\n\n\tdescribe('#save()', function () {\n\t\tit('should save a document', async () => {\n\t\t\tconst account = await accountRepo.save({\n\t\t\t\tname: 'acc',\n\t\t\t});\n\t\t\taccount.name.should.eql('acc');\n\t\t\taccount.id.should.type('string').not.empty();\n\t\t});\n\n\t\tit('should update an existing document', async () => {\n\t\t\tconst account = await accountRepo.save({\n\t\t\t\tname: 'acc',\n\t\t\t});\n\n\t\t\tawait accountRepo.save({\n\t\t\t\tid: account.id,\n\t\t\t\tname: 'acc2',\n\t\t\t});\n\t\t\tconst accounts = await accountRepo.list(null);\n\n\t\t\taccounts.should.length(1);\n\t\t\taccounts[0].name.should.eql('acc2');\n\t\t});\n\t});\n\n\tdescribe('#write()', function () {\n\t\tit('should save a document without merging data', async () => {\n\t\t\tconst ids = { accountId: 'acc' as AccountId };\n\t\t\tconst u1 = await userRepo.write(\n\t\t\t\t{\n\t\t\t\t\tuserName: 'john',\n\t\t\t\t\taddress: { city: 'Vienna' },\n\t\t\t\t},\n\t\t\t\tids\n\t\t\t);\n\t\t\tconst u2 = await userRepo.write(\n\t\t\t\t{\n\t\t\t\t\tid: u1.id,\n\t\t\t\t\tuserName: 'john2',\n\t\t\t\t},\n\t\t\t\tids\n\t\t\t);\n\n\t\t\tu2.should.property('id', u1.id);\n\t\t\tu2.should.property('userName', 'john2');\n\t\t\tu2.should.not.property('address');\n\t\t});\n\t});\n\n\tdescribe('#update()', function () {\n\t\tit('should throw an error when trying to update a document', async () => {\n\t\t\tconst err = await accountRepo.update({ id: 'acc' as AccountId, name: 'acc' }).should.rejected();\n\t\t\terr.should.instanceof(FirestoreStorageError);\n\t\t});\n\n\t\tit('should successfully update an existing document', async () => {\n\t\t\tlet acc = await accountRepo.save({ name: 'acc' });\n\t\t\tacc = await accountRepo.update({\n\t\t\t\tid: acc.id,\n\t\t\t\tname: 'acc2',\n\t\t\t});\n\t\t\tacc.should.property('name', 'acc2');\n\t\t});\n\n\t\tit('should check for 1 level merge', async () => {\n\t\t\tconst accountId = 'acc1' as AccountId;\n\t\t\tlet user = await userRepo.create({ userName: 'name' }, { accountId });\n\t\t\tuser = await userRepo.update(\n\t\t\t\t{\n\t\t\t\t\tid: user.id,\n\t\t\t\t\taddress: {\n\t\t\t\t\t\tstreet: 'street',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ accountId }\n\t\t\t);\n\t\t\tuser.should.eql({\n\t\t\t\tid: user.id,\n\t\t\t\tuserName: 'name',\n\t\t\t\taddress: {\n\t\t\t\t\tstreet: 'street',\n\t\t\t\t},\n\t\t\t\t_rawPath: user._rawPath,\n\t\t\t});\n\t\t});\n\n\t\tit('should check for 2 level merge', async () => {\n\t\t\tconst accountId = 'acc1' as AccountId;\n\t\t\tlet user = await userRepo.create(\n\t\t\t\t{\n\t\t\t\t\tuserName: 'name',\n\t\t\t\t\taddress: {\n\t\t\t\t\t\tstreet: 'street',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ accountId }\n\t\t\t);\n\t\t\tuser = await userRepo.update(\n\t\t\t\t{\n\t\t\t\t\tid: user.id,\n\t\t\t\t\taddress: {\n\t\t\t\t\t\tcity: 'Vienna',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ accountId }\n\t\t\t);\n\t\t\tuser.should.eql({\n\t\t\t\tid: user.id,\n\t\t\t\tuserName: 'name',\n\t\t\t\taddress: {\n\t\t\t\t\tcity: 'Vienna',\n\t\t\t\t},\n\t\t\t\t_rawPath: user._rawPath,\n\t\t\t});\n\t\t});\n\t});\n});\n"]}