"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFirestoreTests = void 0;
const env = __importStar(require("node-env-file"));
const fs = __importStar(require("fs"));
const firestore_1 = require("@google-cloud/firestore");
const rules_unit_testing_1 = require("@firebase/rules-unit-testing");
const path = __dirname + '/../../../.env';
if (fs.existsSync(path)) {
    env(path);
}
function createFirestoreTests(context, setup) {
    let app;
    context.beforeEach(async () => {
        app = await (0, rules_unit_testing_1.initializeTestEnvironment)({
            projectId: 'firestore-storage-local',
            firestore: {
                host: '127.0.0.1',
                port: 8080,
            },
        });
        await app.clearFirestore();
        const firestore = new firestore_1.Firestore({
            projectId: app.projectId,
            host: app.emulators.firestore.host,
            port: app.emulators.firestore.port,
            ssl: false,
        });
        await setup(firestore);
    });
    context.afterEach(async () => {
        if (app) {
            await app.cleanup();
        }
    });
}
exports.createFirestoreTests = createFirestoreTests;
//# sourceMappingURL=test-utils.js.map