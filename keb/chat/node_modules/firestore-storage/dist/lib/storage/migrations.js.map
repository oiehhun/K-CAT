{"version":3,"file":"migrations.js","sourceRoot":"","sources":["../../../src/lib/storage/migrations.ts"],"names":[],"mappings":";;;AAEA,MAAsB,UAAU;IAC/B,YAAgC,OAAkB;QAAlB,YAAO,GAAP,OAAO,CAAW;IAAG,CAAC;IAMtD,KAAK,CAAC,OAAO;QACZ,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,6BAA6B,OAAO,sBAAsB,aAAa,GAAG,CAAC,CAAC;QACxF,OAAO,OAAO,GAAG,aAAa,EAAE;YAC/B,OAAO,CAAC,GAAG,CAAC,kBAAkB,OAAO,OAAO,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC;YAC3D,OAAO,EAAE,CAAC;YACV,MAAM,KAAK,GAAG,4BAA4B,OAAO,EAAE,CAAC;YACpD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpB,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC9B,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YACjC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACvB;IACF,CAAC;IAED,KAAK,CAAC,WAAW;QAChB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC,GAAG,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,OAAe;QACjC,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC,GAAG,CACpC;YACC,OAAO,EAAE,OAAO;SAChB,EACD,EAAE,KAAK,EAAE,IAAI,EAAE,CACf,CAAC;IACH,CAAC;IAED,mCAAmC;IACzB,sBAAsB;QAC/B,OAAO,iBAAiB,CAAC;IAC1B,CAAC;IAEO,oBAAoB;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAA2C,CAAC;IAClG,CAAC;CACD;AA5CD,gCA4CC","sourcesContent":["import { DocumentReference, Firestore } from '@google-cloud/firestore';\n\nexport abstract class Migrations {\n\tprotected constructor(protected storage: Firestore) {}\n\n\tabstract getVersion(): number;\n\n\tabstract onUpgrade(toVersion: number): Promise<any>;\n\n\tasync upgrade() {\n\t\tlet version = await this.readVersion();\n\t\tconst targetVersion = this.getVersion();\n\t\tconsole.log(`Current database version (${version}). Target version (${targetVersion})`);\n\t\twhile (version < targetVersion) {\n\t\t\tconsole.log(`Upgrading from ${version} to ${version + 1}`);\n\t\t\tversion++;\n\t\t\tconst label = `Successfully upgraded to ${version}`;\n\t\t\tconsole.time(label);\n\t\t\tawait this.onUpgrade(version);\n\t\t\tawait this.writeVersion(version);\n\t\t\tconsole.timeEnd(label);\n\t\t}\n\t}\n\n\tasync readVersion(): Promise<number> {\n\t\tconst data = await this.getDocumentReference().get();\n\t\treturn data.data()?.version || 0;\n\t}\n\n\tasync writeVersion(version: number) {\n\t\tawait this.getDocumentReference().set(\n\t\t\t{\n\t\t\t\tversion: version,\n\t\t\t},\n\t\t\t{ merge: true }\n\t\t);\n\t}\n\n\t// noinspection JSMethodCanBeStatic\n\tprotected getVersionDocumentPath() {\n\t\treturn 'version/current';\n\t}\n\n\tprivate getDocumentReference(): DocumentReference<{ version: number }> {\n\t\treturn this.storage.doc(this.getVersionDocumentPath()) as DocumentReference<{ version: number }>;\n\t}\n}\n"]}