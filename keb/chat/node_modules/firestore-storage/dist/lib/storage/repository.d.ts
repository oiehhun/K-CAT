import { BaseRepository as CoreBaseRepository, CollectionIds, CollectionPath, DocumentIds, BaseModel, ModelQuery, PatchUpdate, ModelDataOnly, ModelDataWithId } from 'firestore-storage-core';
import { Query } from './query';
import { DocumentSnapshot, Firestore } from '@google-cloud/firestore';
export declare abstract class BaseRepository<T extends BaseModel, Path extends CollectionPath<any, any, any>> extends CoreBaseRepository<T, Path, DocumentSnapshot<T>> {
    protected firestore: Firestore;
    constructor(firestore: Firestore);
    fromFirestoreToObject(snapshot: DocumentSnapshot<T>): T;
    /**
     *
     */
    findById(ids: DocumentIds<Path>): Promise<T | null>;
    getById(ids: DocumentIds<Path>): Promise<T>;
    find(attributes: ModelQuery<T>, ids: CollectionIds<Path>): Promise<T | null>;
    get(attributes: ModelQuery<T>, ids: CollectionIds<Path>): Promise<T>;
    list(attributes: ModelQuery<T> | null, ids: CollectionIds<Path>): Promise<T[]>;
    query(cb: (qb: Query<T>) => Query<T>, ids: CollectionIds<Path>): Promise<T[]>;
    groupQuery(cb?: (qb: Query<T>) => Query<T>): Promise<T[]>;
    findAll(documentIds: string[], ids: CollectionIds<Path>): Promise<(T | null)[]>;
    getAll(documentIds: string[], ids: CollectionIds<Path>): Promise<T[]>;
    count(cb: (qb: Query<T>) => Query<T>, ids: CollectionIds<Path>): Promise<number>;
    create(data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): Promise<T>;
    /**@deprecated use upsert instead*/
    save(data: T | ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>, ids: CollectionIds<Path>): Promise<T>;
    upsert(data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): Promise<T>;
    write(data: T | ModelDataOnly<T>, ids: CollectionIds<Path>): Promise<T>;
    update(data: T | PatchUpdate<ModelDataWithId<T>>, ids: CollectionIds<Path>): Promise<T>;
    private applyToDocRef;
    delete(ids: DocumentIds<Path>): Promise<void>;
    generateId(): string;
}
//# sourceMappingURL=repository.d.ts.map