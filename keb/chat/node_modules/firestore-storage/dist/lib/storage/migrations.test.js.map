{"version":3,"file":"migrations.test.js","sourceRoot":"","sources":["../../../src/lib/storage/migrations.test.ts"],"names":[],"mappings":";;AAAA,kBAAgB;AAEhB,6CAA0C;AAC1C,yDAAuD;AACvD,6CAAoD;AAEpD,QAAQ,CAAC,YAAY,EAAE;IACtB,MAAM,mBAAoB,SAAQ,uBAAU;QAG3C,YAAY,SAAoB;YAC/B,KAAK,CAAC,SAAS,CAAC,CAAC;YACjB,IAAI,CAAC,WAAW,GAAG,IAAI,oCAAiB,CAAC,SAAS,CAAC,CAAC;QACrD,CAAC;QAED,UAAU;YACT,OAAO,CAAC,CAAC;QACV,CAAC;QAED,SAAS,CAAC,SAAiB;YAC1B,QAAQ,SAAS,EAAE;gBAClB,KAAK,CAAC;oBACL,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC;aAC5B;QACF,CAAC;QAEO,KAAK,CAAC,YAAY;YACzB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;gBAC/B,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;oBAC7B,EAAE,EAAE,OAAO,CAAC,EAAE;oBACd,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,IAAI;iBACzB,CAAC,CAAC;aACH;QACF,CAAC;KACD;IAED,IAAI,UAA+B,CAAC;IACpC,IAAA,iCAAoB,EAAC,IAAI,EAAE,CAAC,SAAS,EAAE,EAAE;QACxC,UAAU,GAAG,IAAI,mBAAmB,CAAC,SAAS,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,UAAU,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,EAAE,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;YAC1C,IAAI,EAAE,MAAM;SACZ,CAAC,CAAC;QACH,IAAI,EAAE,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;YAC1C,IAAI,EAAE,MAAM;SACZ,CAAC,CAAC;QACH,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC;QAE3B,EAAE,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAChE,EAAE,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAEhE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7B,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7B,MAAM,UAAU,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import 'should';\nimport { Firestore } from '@google-cloud/firestore';\nimport { Migrations } from './migrations';\nimport { AccountRepository } from './definitions.test';\nimport { createFirestoreTests } from './test-utils';\n\ndescribe('Migrations', function () {\n\tclass MyProjectMigrations extends Migrations {\n\t\tpublic readonly accountRepo: AccountRepository;\n\n\t\tconstructor(firestore: Firestore) {\n\t\t\tsuper(firestore);\n\t\t\tthis.accountRepo = new AccountRepository(firestore);\n\t\t}\n\n\t\tgetVersion(): number {\n\t\t\treturn 1;\n\t\t}\n\n\t\tonUpgrade(toVersion: number) {\n\t\t\tswitch (toVersion) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.appendToName();\n\t\t\t}\n\t\t}\n\n\t\tprivate async appendToName() {\n\t\t\tconst accounts = await this.accountRepo.list(null);\n\t\t\tfor (const account of accounts) {\n\t\t\t\tawait this.accountRepo.update({\n\t\t\t\t\tid: account.id,\n\t\t\t\t\tname: `${account.name}-1`,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tlet migrations: MyProjectMigrations;\n\tcreateFirestoreTests(this, (firestore) => {\n\t\tmigrations = new MyProjectMigrations(firestore);\n\t});\n\n\tit('should run a simple migration', async () => {\n\t\tawait migrations.readVersion().should.resolvedWith(0);\n\t\tlet a1 = await migrations.accountRepo.save({\n\t\t\tname: 'acc1',\n\t\t});\n\t\tlet a2 = await migrations.accountRepo.save({\n\t\t\tname: 'acc2',\n\t\t});\n\t\tawait migrations.upgrade();\n\n\t\ta1 = await migrations.accountRepo.getById({ accountId: a1.id });\n\t\ta2 = await migrations.accountRepo.getById({ accountId: a2.id });\n\n\t\ta1.name.should.eql('acc1-1');\n\t\ta2.name.should.eql('acc2-1');\n\t\tawait migrations.readVersion().should.resolvedWith(1);\n\t});\n});\n"]}